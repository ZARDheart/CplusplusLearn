#include <iostream>
// 字符串库
#include <string>
// 数学计算库
#include <cmath>

using namespace std;
/*
运算符：用于执行代码的运算
运算符类型	作用

算术运算符	用于处理四则运算
赋值运算符	用于将表达式的值赋给变量
比较运算符	用于表达式的比较，并返回一个真值或假值
逻辑运算符	用于根据表达式的值返回真值或假值
*/

int main()
{
	// 1 算术运算符：
	// 运算符	术语	示例	结果
	// +	正号	+3	3
	// -	负号	-3	-3
	// +	加	10 + 5	15
	// -	减	10 - 5	5
	// *	乘	10 * 5	50
	// /	除	10 / 5	2
	// %	取模(取余)	10 % 3	1
	// ++	前置递增	a=2; b=++a;	a=3; b=3;
	// ++	后置递增	a=2; b=a++;	a=3; b=2;
	// –	前置递减	a=2; b=–a;	a=1; b=1;
	// –	后置递减	a=2; b=a–;	a=1; b=2;
	int a1 = 10, b1 = 3, c1 = 0;
	cout << 1.0 + 2.0 - 3.0 * 4 / 5 << endl;
	cout << a1 / b1 << endl; // 两个整数相除结果依然是整数
	// cout << a1 / 0 << endl; //报错，除数不可以为0
	cout << 0.5 / 0.25 << endl; // 两个小数可以相除
	// 乘方 cmath
	cout << pow(3, 3) << endl;
	// 在C++中，采用的是向0取整的方法，通俗地说，就是去掉小数部分
	cout << "求模：" << 5 % 2 << endl; // 基于整数
	cout << -5 % 2 << endl;
	c1 = b1++ * 10;
	cout << "c=" << c1 << ",b=" << b1 << endl; // 后增,先再计算表达式后自己增加，--类似
	c1 = ++b1 * 10;
	cout << "c=" << c1 << ",b=" << b1 << endl; // 先自己增加，再再计算表达式

	// 2 赋值运算符:用于将表达式的值赋给变量
	// =,+=,-=,*=,/=,%=
	a1 += 2; // a1 = a1 + 2;
	cout << "a1 = " << a1 << endl;

	// 3 比较运算符：用于表达式的比较，并返回一个真值或假值 ==,!=,<,>,<=,>=
	int a = 10;
	int b = 20;
	cout << (a != b) << endl; // 1

	// 4 逻辑运算符：用于根据表达式的值返回真值或假值 !,&&,||
	cout << !a << endl;		  // 0
	cout << !!a << endl;	  // 1
	cout << (a || 0) << endl; // 1
	cout << (a && 0) << endl; // 0
	char ch1 = 'A', ch2 = '.';
	cout << "判断变量是否为字母:" << isalpha(ch1) << endl; // 判断变量是否为字母ture(>0,不一定是1),false(==0)
	cout << isalpha(ch1 - 1) << endl;
	cout << islower(ch1) << endl; // 判断变量是否为小写字母ture(>0,不一定是1),false(==0)
	cout << isupper(ch1) << endl;
	cout << isdigit(b) << endl;
	cout << ispunct(ch2) << endl; // 标点符号否

	// 5 位运算符
	// & 	按位与 		如果两个相应的二进制位都为1，则该位的结果值为1，否则为0
	// | 	按位或		两个相应的二进制位中只要有一个为1，该位的结果值为1
	// ^ 	按位异或	若参加运算的两个二进制位值相同则为0，否则为1
	// ~ 	取反 		~是一元运算符，用来对一个二进制数按位取反，即将0变1，将1
	// A = 0011 1100
	// B = 0000 1101
	// A&B = 0000 1100
	// A|B = 0011 1101
	// A^B = 0011 0001
	// ~A  = 1100 0011
	// 	移位运算：

	// 	<< 	左移 	用来将一个数的各二进制位全部左移n位，低位以0补充，高位越界后舍弃。
	// 注意：左移是做乘2的运算，但这是在符号位（原码将最高位符号以0表示正，1表示负）不变的情况下。
	// 如果符号位发生了改变，说明已经不能做乘2的运算了，否则会溢出，得到的值不是乘2的结果。
	short int aa = 9115;	   // 0010001110011011   (9115的二进制表示)
	cout << (aa << 1) << endl; //  =18230       0100011100110110   (注意高位越界后舍弃一个0，低位填充一个0)
	cout << (aa << 2) << endl; //  = -29076    1000111001101100   (注意高位越界后舍弃两个0，低位填充两个0）

	// >> 	右移 	将一个数的各二进制位右移N位，移到右端的低位被舍弃，高位全部以原本的符号位填充
	cout << (aa >> 1) << endl;	   // = 4557          0001000111001101（注意低位越界后舍去了一个1，高位补一0）
	cout << (aa >> 2) << endl;	   // = 2278          0000100011100110  (注意低位越界后舍去了两个1，高位补两0）
	short int c = -32766;		   //(负数符号位为1) 1000000000000010
	cout << (-32766 >> 1) << endl; // = -16383                 1100000000000001(注意低位越界后舍弃一个0,高位补1)
	cout << (-32766 >> 2) << endl; // = -8192                   1110000000000000(注意低位越界后舍弃0和1,高位补俩1)

	return 0;
}
