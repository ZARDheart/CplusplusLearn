// 文件注释消息 --------------单行注释
/**
 * @file demo1_data_calu.cpp
 * @author WangBin
 * @brief C++学习demo
 * @version 0.1
 * @date 2021-12-06
 * https://namic00.github.io/
 * @copyright Copyright (c) 2021
 * -------------------多行注释
 */

#include <iostream>

// 命名空间：大型应用程序经常使用来自不同厂商的开发库，几乎不可避免会使用相同的名字，
// 也就是说一个库中定义的名字可能与其他库中的名字相同而产生冲突，使得程序员不能组合各自独立的开发库到一个程序中
// 命名空间就是用来限定名字的解析和使用范围的，原理是将全局作用域划分为一个一个的命名空间，
// 每个命名空间是一个独立的作用域，在不同命名空间内部定义的名字彼此之间互不影响，从而有效的避免了命名空间污染。
// 用法：
// namespace 命名空间名
// {
//      作用域
// }
using namespace std;

/*
这是一个第一个C++学习代码, 主要是初试以及注释的使用：
*/

/*注释技巧：
（1）变量前一行加三斜杠“///”注释，作为变量的查看说明（其他地方调用时可查）;
（2）变量同一行后加“///<”注释，效果同上;
（3）函数或类前加：见开头以及主函数上方内容，效果与变量说明类似;
（4） 一些特殊标记：*/
// fixme: 标识处代码需要修正，甚至代码是错误的，不能工作，需要修复，如何修正会在说明中简略说明 // FIXME
// bug: 代码存在已知的错误, 现在的代码中没有错误能运行, 但是由于用户输入导致的错误 // BUG
// hack: 变通方法, 差强人意的解决方案，补锅踩雷填坑 /*HACK*/
// note: 笔记，特别是编写者的想法意图和灵感 // NOTE:
// NOTICE: 强调值得注意的地方,
// xxx: 代码有问题或具有误导性, 需引起警惕 // XXX
// test: 测试 // TEST
// done: 已经解决了的todo bug fixme将其变为done // DONE
// Todo: 标识处有功能代码待编写，即将需要完成的任务或实现的功能 // TODO
// ZARD：用户（我）自定义的标签

// Test
/** @brief 函数或类的说明
 *
 * @param[in]  pi1 输入参数说明
 * @param[in]  pi2 输入参数说明
 * @param[in]  argc 终端输入参数数量（包括可执行文件）
 * @param[in]  argv 终端输入参数字符串数组地址
 * ...
 * @param[out] po1 输出参数说明
 * ...
 *
 * @return int 返回值说明   */
int main(int argc, char **argv)
{
    std::cout << "Hello world!" << std::endl;

    // 终端界面输出日志时，为了区分输出的有用信息、错误信息，可以给不同级别的输出加上不同的颜色，以方便查看

    /*
    格式
        开始格式： \033 [ 参数1 ; 参数2 ; 参数3... m   //以字母m结尾，三个参数如下
        内容格式： 正常的printf中的参数及内容
        结束格式： \033[0m   //结束一定要有结束标志
    属性
        控制码	效果
        \033[0m	关闭所有属性
        \033[1m	设置字体高亮度
        \033[2m	低亮（减弱）显示
        \033[4m	下划线
        \033[5m	闪烁
        \033[7m	反显
        \033[8m	消隐
    字体颜色
        控制码	字体效果
        \033[30m	黑色
        \033[31m	红色
        \033[32m	绿色
        \033[33m	黄色
        \033[34m	蓝色
        \033[35m	紫色
        \033[36m	浅蓝色
        \033[37m	白色
        \033[38m	无
        \033[39m	无
    背景颜色
        控制码	背景效果
        \033[40m	黑色
        \033[41m	红色
        \033[42m	绿色
        \033[43m	黄色
        \033[44m	蓝色
        \033[45m	紫色
        \033[46m	浅蓝色
        \033[47m	白色
        \033[48m	无
        \033[49m	无
    */
    printf("\033[0;32;31m红色****************************\033[m\n");
    printf("\033[1;31m亮红色**************************\033[m\n");

    printf("\033[0;32;32m绿色****************************\033[m\n");
    printf("\033[1;32m亮绿色****************************\033[m\n");

    printf("\033[0;32;34m蓝色******************************\033[m\n");
    printf("\033[1;34m亮蓝色****************************\033[m\n");

    printf("\033[0;36m青色*****************************\033[m\n");
    printf("\033[1;36m亮青色****************************\033[m\n");

    printf("\033[0;35m紫色*****************************\033[m\n");
    printf("\033[1;35m亮紫色****************************\033[m\n");

    printf("\033[1;30m灰色******************************\033[m\n");
    printf("\033[0;37m亮灰色*****************************\033[m\n");

    printf("\033[1;37m白色****************************\033[m\n");
    printf("\033[0;33m棕色*****************************\033[m\n");
    printf("\033[1;33m黄色****************************\033[m\n");

    printf("\n\033[31;1m背景颜色\t\033[0m测试文字\n");
    printf("\033[40m低亮文字黑色背景\033[0m\t\033[40;1m高亮文字黑色背景\033[0m\n");
    printf("\033[41m低亮文字红色背景\033[0m\t\033[41;1m高亮文字红色背景\033[0m\n");
    printf("\033[42m低亮文字绿色背景\033[0m\t\033[42;1m高亮文字绿色背景\033[0m\n");
    printf("\033[43m低亮文字黄色背景\033[0m\t\033[43;1m高亮文字黄色背景\033[0m\n");
    printf("\033[44m低亮文字蓝色背景\033[0m\t\033[44;1m高亮文字蓝色背景\033[0m\n");
    printf("\033[45m低亮文字紫色背景\033[0m\t\033[45;1m高亮文字紫色背景\033[0m\n");
    printf("\033[46m低亮文字浅蓝背景\033[0m\t\033[46;1m高亮文字浅蓝背景\033[0m\n");
    printf("\033[47m低亮文字白色背景\033[0m\t\033[47;1m高亮文字白色背景\033[0m\n");

    std::cout << "\033[1;5;36;47mHello world!\033[0m" << std::endl;

    return 0;
}
